mod header;
pub use header::*;
mod error;
pub use error::*;
mod question;
pub use question::*;
mod resource_record;
pub use resource_record::*;

#[derive(Debug, Default)]
pub struct DnsPacket {
    pub header: Header,
    pub questions: Vec<Question>,
    pub answers: Vec<ResourceRecord>,
    //    pub authority: Authority,
    //    pub additional: Additional,
}

impl DnsPacket {
    pub fn parse(data: &[u8]) -> Result<Self, ParserError> {
        let header = Header::parse(data)?;
        let (questions, read) = DnsPacket::parse_questions(&header, data)?;

        Ok(Self {
            header,
            questions,

            ..Default::default()
        })
    }

    fn parse_questions(
        header: &Header,
        data: &[u8],
    ) -> Result<(Vec<Question>, usize), ParserError> {
        let mut out = Vec::with_capacity(header.qd_count as usize);
        let mut offset = Header::size();

        for _ in 0..header.qd_count {
            let (q, read) = Question::parse(&data[offset..], data)?;

            offset += read;
            out.push(q);
        }

        Ok((out, offset))
    }
}

#[cfg(test)]
mod test {

    use super::*;

    #[test]
    fn parse_header() {
        let header = Header::parse(&[
            0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03,
        ])
        .expect("error in parsing input");

        assert_eq!(header.id, 0);
        assert!(header.qr());
        assert_eq!(header.opcode(), 0);
        assert!(header.aa());
        assert!(!header.tc());
        assert!(!header.rd());
        assert!(!header.ra());
        assert_eq!(header.z(), 0);
        assert_eq!(header.rcode(), 0);

        assert_eq!(header.qd_count, 0);
        assert_eq!(header.an_count, 5);
        assert_eq!(header.ns_count, 0);
        assert_eq!(header.ar_count, 3);
    }

    #[test]
    fn parse_questions() {
        let packet = DnsPacket::parse(&[
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x5f,
            0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b,
            0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c,
            0x00, 0x01, 0x07, 0x5f, 0x72, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0xc0, 0x1c, 0x00, 0x0c,
            0x00, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78,
            0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x00, 0x01, 0xc0, 0x0c,
            0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11, 0x93, 0x00, 0x11, 0x0e, 0x49, 0x73, 0x68,
            0x61, 0x6e, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x69, 0x50, 0x61, 0x64, 0xc0, 0x0c,
        ])
        .expect("error in parsing input");

        let header = packet.header;

        assert_eq!(header.id, 0);
        assert!(!header.qr());
        assert_eq!(header.opcode(), 0);
        assert!(!header.aa());
        assert!(!header.tc());
        assert!(!header.rd());
        assert!(!header.ra());
        assert_eq!(header.z(), 0);
        assert_eq!(header.rcode(), 0);

        assert_eq!(header.qd_count, 3);
        assert_eq!(header.an_count, 1);
        assert_eq!(header.ns_count, 0);
        assert_eq!(header.ar_count, 0);

        assert_eq!(packet.questions.len(), 3);
    }

    #[test]
    fn parse_samples() {
        let inputs = [
            vec![
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0e, 0x49,
                0x73, 0x68, 0x61, 0x6e, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x69, 0x50, 0x61, 0x64, 0x0f,
                0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e,
                0x6b, 0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00,
                0xff, 0x80, 0x01, 0x0b, 0x49, 0x73, 0x68, 0x61, 0x6e, 0x73, 0x2d, 0x69, 0x50, 0x61,
                0x64, 0xc0, 0x30, 0x00, 0xff, 0x80, 0x01, 0xc0, 0x0c, 0x00, 0x21, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0xda, 0x42, 0xc0, 0x3b, 0xc0,
                0x3b, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x10, 0xfe, 0x80, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x67, 0xf6, 0x62, 0x5e, 0xde, 0x9b, 0x3d, 0xc0,
                0x3b, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x10, 0x2a, 0x0a, 0x60,
                0x40, 0x40, 0x04, 0x00, 0x10, 0x04, 0x83, 0x64, 0x0f, 0x03, 0x51, 0x2c, 0x9c, 0xc0,
                0x3b, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x00, 0x04, 0x0a, 0x00, 0x0a,
                0x32,
            ],
            vec![
                0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x5f,
                0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x2d, 0x6c, 0x69, 0x6e, 0x6b,
                0x04, 0x5f, 0x74, 0x63, 0x70, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x00, 0x00, 0x0c,
                0x00, 0x01, 0x07, 0x5f, 0x72, 0x64, 0x6c, 0x69, 0x6e, 0x6b, 0xc0, 0x1c, 0x00, 0x0c,
                0x00, 0x01, 0x0c, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x2d, 0x70, 0x72, 0x6f, 0x78,
                0x79, 0x04, 0x5f, 0x75, 0x64, 0x70, 0xc0, 0x21, 0x00, 0x0c, 0x00, 0x01, 0xc0, 0x0c,
                0x00, 0x0c, 0x00, 0x01, 0x00, 0x00, 0x11, 0x93, 0x00, 0x11, 0x0e, 0x49, 0x73, 0x68,
                0x61, 0x6e, 0xe2, 0x80, 0x99, 0x73, 0x20, 0x69, 0x50, 0x61, 0x64, 0xc0, 0x0c,
            ],
        ];

        for input in inputs.iter() {
            assert!(DnsPacket::parse(input).is_ok());
        }
    }
}
